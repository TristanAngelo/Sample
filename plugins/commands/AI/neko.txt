import axios from 'axios';
import fs from 'fs';
import path from 'path';

const config = {
  name: "neko",
  version: "3.8",
  credits: "Minn&Remod by Hazeyy (Converted by Grim)", 
  description: "( 😼 𝙈𝙚𝙤𝙬𝙬 - 𝘾𝙖𝙩𝙂𝙋𝙏 )",
  usage: "[query]",
  cooldown: 5,
};

const __dirname = path.dirname(new URL(import.meta.url).pathname);

async function onCall({ message }) {
  const { threadID, messageID } = message;
  const args = message.body.split(/\s+/);
  args.shift();
  const q = args.join(" ");
  if (!q) return message.reply("😺 | Add a text—𝘕𝘺ā𝘯𝘺ā~");
  const meow = await global.api.sendMessage("🐱 | 𝘕𝘺ā𝘯𝘺ā~", threadID, messageID);

  try {
    const response = await axios.post("https://catgpt.guru/api/chat", {
      messages: [
        {
          role: "user",
          content: q,
        },
      ],
    });

    // Apply the formatFont function to format the response text
    const formattedResponse = formatFont(response.data);

    const imgData = await searchPinterest(q, threadID, messageID);

    if (imgData && imgData.length > 0) {
      global.api.unsendMessage(meow.messageID);
      message.reply({
        body: `${formattedResponse}\n━━━━━━━━━━━━━\n😸 | 𝘏𝘦𝘳𝘦 𝘢𝘳𝘦 𝘵𝘩𝘦 𝘪𝘮𝘢𝘨𝘦𝘴—𝘕𝘺ā𝘯𝘺ā~ `,
        attachment: imgData
      });
    } else {
      message.reply("🙀 | 𝖴𝗇𝖾𝗑𝗉𝖾𝖼𝗍𝖾𝖽 𝖤𝗋𝗋𝗈𝗋 w𝗁𝗂𝗅𝖾 𝖿𝖾𝗍𝖼𝗁𝗂𝗇𝗀 𝗂𝗆𝖺𝗀𝖾𝗌");
    }
  } catch (error) {
    console.error(error);
    message.reply('😿 | Catgpt didn\'t meow back :(');
  }
}

async function searchPinterest( query ) {
  try {
    const res = await axios.get(`https://api-dien.kira1011.repl.co/pinterest?search=${encodeURIComponent(query)}`);
    const data = res.data.data;
    var num = 0;
    var imgData = [];
    for (var i = 0; i < 6; i++) {
      let path = __dirname + `/cache/${num+=1}.jpg`;
      let getDown = (await axios.get(`${data[i]}`, { responseType: 'arraybuffer' })).data;
      fs.writeFileSync(path, Buffer.from(getDown, 'binary'));
      imgData.push(fs.createReadStream(__dirname + `/cache/${num}.jpg`));
    }
    for (let ii = 1; ii < 6; ii++) {
      fs.unlinkSync(__dirname + `/cache/${ii}.jpg`);
    }
    return imgData;
  } catch (error) {
    console.error(error);
    return [];
  }
}

function formatFont(text) {
  const fontMapping = {
    a: "𝖺", b: "𝖻", c: "𝖼", d: "𝖽", e: "𝖾", f: "𝖿", g: "𝗀", h: "𝗁", i: "𝗂", j: "𝗃", k: "𝗄", l: "𝗅", m: "𝗆",
    n: "𝗇", o: "𝗈", p: "𝗉", q: "𝗊", r: "𝗋", s: "𝗌", t: "𝗍", u: "𝗎", v: "𝗏", w: "𝗐", x: "𝗑", y: "𝗒", z: "𝗓",
    A: "𝖠", B: "𝖡", C: "𝖢", D: "𝖣", E: "𝖤", F: "𝖥", G: "𝖦", H: "𝖧", I: "𝖨", J: "𝖩", K: "𝖪", L: "𝖫", M: "𝖬",
    N: "𝖭", O: "𝖮", P: "𝖯", Q: "𝖰", R: "𝖱", S: "𝖲", T: "𝖳", U: "𝖴", V: "𝖵", W: "𝖶", X: "𝖷", Y: "𝖸", Z: "𝖹"
  };

  let formattedText = "";
  for (const char of text) {
    if (char in fontMapping) {
      formattedText += fontMapping[char];
    } else {
      formattedText += char;
    }
  }

  return formattedText;
}

export default {
  config,
  onCall
}